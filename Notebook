{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Meriselle Ruotolo\n",
    "Midterm Project"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import struct\n",
    "import gzip\n",
    "from pathlib import Path\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "from IPython.core.display import Image\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.svm import SVC, LinearSVC, SVR # possibly unnecessary\n",
    "from mpl_toolkits.mplot3d import Axes3D"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this assignment,... words words words explanation least squares binary classifier linear regression model stuff\n",
    "The first several cells below is simply set up and testing that the data has been properly imported and set up."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2051 60000 28 28\n",
      "2051 10000 28 28\n",
      "(60000, 28, 28) (10000, 28, 28)\n"
     ]
    }
   ],
   "source": [
    "train = dict()\n",
    "test = dict()\n",
    "def get_images(filename):\n",
    "    with gzip.GzipFile(Path(filename), 'rb') as f:\n",
    "        magic, size, rows, cols = struct.unpack(\">IIII\", f.read(16))\n",
    "        print(magic, size, rows, cols)\n",
    "        images = np.frombuffer(f.read(), dtype=np.dtype('B'))\n",
    "        return images.reshape(size, rows, cols)\n",
    "train['image'] = get_images('train-images-idx3-ubyte.gz')\n",
    "test['image'] = get_images('t10k-images-idx3-ubyte.gz')\n",
    "print(train['image'].shape, test['image'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "_ = ax.imshow(train['image'][1000], cmap = 'gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(60000,) (10000,)\n"
     ]
    }
   ],
   "source": [
    "def get_labels(filename):\n",
    "    with gzip.GzipFile(Path(filename), 'rb') as f:\n",
    "        magic, num = struct.unpack(\">II\", f.read(8))\n",
    "        labels = np.frombuffer(f.read(), dtype=np.dtype('B'))\n",
    "    return labels\n",
    "train['label'] = get_labels('train-labels-idx1-ubyte.gz')\n",
    "test['label'] = get_labels('t10k-labels-idx1-ubyte.gz')\n",
    "print(train['label'].shape, test['label'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=uint8)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking to see if the labels are within the expected values\n",
    "np.unique(train['label'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**PART I**\n",
    "\n",
    "In part one, we will be taking a least-squares binary classifer and creating a classifer for each specific digit [0-9]. We will then test our classifier with the handwritten mnist digit set and count the number of correctly identified hand-written digits using our classifier. We will anaylze its accuracy. \n",
    "The least-squares binary classifer we will be using is the linear regression module.\n",
    "\n",
    "**LEAST SQUARES LINEAR REGRESSION AS A BINARY CLASSIFIER:**\n",
    "First, we must partition our data to x and y axis. We will be training our binary classifer with the \"training set.\" \n",
    "\n",
    "__We will set up the x and y axis for the training set for the digit zero:__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "x0 = np.zeros((60000, 28 * 28))\n",
    "y0 = np.zeros((60000,))\n",
    "\n",
    "for i in range(len(train['image'])):\n",
    "    x0[i] = train['image'][i].flatten()\n",
    "    y0[i] = 1 if train['label'][i] == 0 else -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr = LinearRegression()\n",
    "lr.fit(x0, y0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# lr.intercept_, lr.coef_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see from above, the image shown is the handwritten digit 5, so the y returned is -1, as it is not the handwritten digit 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_x = np.zeros((10000, 28*28))\n",
    "test_y = np.zeros((10000,))\n",
    "\n",
    "for i in range(10000):\n",
    "    test_x[i] = test['image'][i].flatten()\n",
    "    test_y[i] = -1 if test['label'][i] != 0 else 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9843"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_y = lr.predict(test_x)\n",
    "np.sum((predict_y > 0) == (test_y > 0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Surprisingly, the succuss rate for using linear regression as a binary classifier to classify the digit zero has a success rate of 98.43%. I suspect that there are many false positives.  # CHECK FALSE POSITIVES \n",
    "\n",
    "I will now check the rest of the digits as well and see the success rate for each specific digit. \n",
    "\n",
    "The process may seem repetitive. The end of part one will display all the success rates and overall success rate of the binary classifier. There will be no other new information in this section, so going to PART II from here may be beneficial.\n",
    "\n",
    "__Binary Classifier for digit one:__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9833"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1 = np.zeros((60000, 28 * 28))\n",
    "y1 = np.zeros((60000,))\n",
    "\n",
    "for i in range(len(train['image'])):\n",
    "    x1[i] = train['image'][i].flatten()\n",
    "    y1[i] = 1 if train['label'][i] == 1 else -1\n",
    "    \n",
    "lr = LinearRegression()\n",
    "lr.fit(x1, y1)\n",
    "\n",
    "test_x = np.zeros((10000, 28*28))\n",
    "test_y = np.zeros((10000,))\n",
    "\n",
    "for i in range(10000):\n",
    "    test_x[i] = test['image'][i].flatten()\n",
    "    test_y[i] = -1 if test['label'][i] != 1 else 1\n",
    "    \n",
    "predict_y = lr.predict(test_x)\n",
    "np.sum((predict_y > 0) == (test_y > 0))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9582"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x2 = np.zeros((60000, 28 * 28))\n",
    "y2 = np.zeros((60000,))\n",
    "\n",
    "for i in range(len(train['image'])):\n",
    "    x2[i] = train['image'][i].flatten()\n",
    "    y2[i] = 1 if train['label'][i] == 2 else -1\n",
    "    \n",
    "lr = LinearRegression()\n",
    "lr.fit(x2, y2)\n",
    "\n",
    "test_x = np.zeros((10000, 28*28))\n",
    "test_y = np.zeros((10000,))\n",
    "\n",
    "for i in range(10000):\n",
    "    test_x[i] = test['image'][i].flatten()\n",
    "    test_y[i] = -1 if test['label'][i] != 2 else 1\n",
    "    \n",
    "predict_y = lr.predict(test_x)\n",
    "np.sum((predict_y > 0) == (test_y > 0))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9601"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x3 = np.zeros((60000, 28 * 28))\n",
    "y3 = np.zeros((60000,))\n",
    "\n",
    "for i in range(len(train['image'])):\n",
    "    x3[i] = train['image'][i].flatten()\n",
    "    y3[i] = 1 if train['label'][i] == 3 else -1\n",
    "    \n",
    "lr = LinearRegression()\n",
    "lr.fit(x3, y3)\n",
    "\n",
    "test_x = np.zeros((10000, 28*28))\n",
    "test_y = np.zeros((10000,))\n",
    "\n",
    "for i in range(10000):\n",
    "    test_x[i] = test['image'][i].flatten()\n",
    "    test_y[i] = -1 if test['label'][i] != 3 else 1\n",
    "    \n",
    "predict_y = lr.predict(test_x)\n",
    "np.sum((predict_y > 0) == (test_y > 0))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9665"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x4 = np.zeros((60000, 28 * 28))\n",
    "y4 = np.zeros((60000,))\n",
    "\n",
    "for i in range(len(train['image'])):\n",
    "    x4[i] = train['image'][i].flatten()\n",
    "    y4[i] = 1 if train['label'][i] == 4 else -1\n",
    "    \n",
    "lr = LinearRegression()\n",
    "lr.fit(x4, y4)\n",
    "\n",
    "test_x = np.zeros((10000, 28*28))\n",
    "test_y = np.zeros((10000,))\n",
    "\n",
    "for i in range(10000):\n",
    "    test_x[i] = test['image'][i].flatten()\n",
    "    test_y[i] = -1 if test['label'][i] != 4 else 1\n",
    "    \n",
    "predict_y = lr.predict(test_x)\n",
    "np.sum((predict_y > 0) == (test_y > 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9466"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x5 = np.zeros((60000, 28 * 28))\n",
    "y5 = np.zeros((60000,))\n",
    "\n",
    "for i in range(len(train['image'])):\n",
    "    x5[i] = train['image'][i].flatten()\n",
    "    y5[i] = 1 if train['label'][i] == 5 else -1\n",
    "    \n",
    "lr = LinearRegression()\n",
    "lr.fit(x5, y5)\n",
    "\n",
    "test_x = np.zeros((10000, 28*28))\n",
    "test_y = np.zeros((10000,))\n",
    "\n",
    "for i in range(10000):\n",
    "    test_x[i] = test['image'][i].flatten()\n",
    "    test_y[i] = -1 if test['label'][i] != 5 else 1\n",
    "    \n",
    "predict_y = lr.predict(test_x)\n",
    "np.sum((predict_y > 0) == (test_y > 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9741"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x6 = np.zeros((60000, 28 * 28))\n",
    "y6 = np.zeros((60000,))\n",
    "\n",
    "for i in range(len(train['image'])):\n",
    "    x6[i] = train['image'][i].flatten()\n",
    "    y6[i] = 1 if train['label'][i] == 6 else -1\n",
    "    \n",
    "lr = LinearRegression()\n",
    "lr.fit(x6, y6)\n",
    "\n",
    "test_x = np.zeros((10000, 28*28))\n",
    "test_y = np.zeros((10000,))\n",
    "\n",
    "for i in range(10000):\n",
    "    test_x[i] = test['image'][i].flatten()\n",
    "    test_y[i] = -1 if test['label'][i] != 6 else 1\n",
    "    \n",
    "predict_y = lr.predict(test_x)\n",
    "np.sum((predict_y > 0) == (test_y > 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9645"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x7 = np.zeros((60000, 28 * 28))\n",
    "y7 = np.zeros((60000,))\n",
    "\n",
    "for i in range(len(train['image'])):\n",
    "    x7[i] = train['image'][i].flatten()\n",
    "    y7[i] = 1 if train['label'][i] == 7 else -1\n",
    "    \n",
    "lr = LinearRegression()\n",
    "lr.fit(x7, y7)\n",
    "\n",
    "test_x = np.zeros((10000, 28*28))\n",
    "test_y = np.zeros((10000,))\n",
    "\n",
    "for i in range(10000):\n",
    "    test_x[i] = test['image'][i].flatten()\n",
    "    test_y[i] = -1 if test['label'][i] != 7 else 1\n",
    "    \n",
    "predict_y = lr.predict(test_x)\n",
    "np.sum((predict_y > 0) == (test_y > 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9489"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x8 = np.zeros((60000, 28 * 28))\n",
    "y8 = np.zeros((60000,))\n",
    "\n",
    "for i in range(len(train['image'])):\n",
    "    x8[i] = train['image'][i].flatten()\n",
    "    y8[i] = 1 if train['label'][i] == 8 else -1\n",
    "    \n",
    "lr = LinearRegression()\n",
    "lr.fit(x8, y8)\n",
    "\n",
    "test_x = np.zeros((10000, 28*28))\n",
    "test_y = np.zeros((10000,))\n",
    "\n",
    "for i in range(10000):\n",
    "    test_x[i] = test['image'][i].flatten()\n",
    "    test_y[i] = -1 if test['label'][i] != 8 else 1\n",
    "    \n",
    "predict_y = lr.predict(test_x)\n",
    "np.sum((predict_y > 0) == (test_y > 0))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9477"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x9 = np.zeros((60000, 28 * 28))\n",
    "y9 = np.zeros((60000,))\n",
    "\n",
    "for i in range(len(train['image'])):\n",
    "    x9[i] = train['image'][i].flatten()\n",
    "    y9[i] = 1 if train['label'][i] == 9 else -1\n",
    "    \n",
    "lr = LinearRegression()\n",
    "lr.fit(x9, y9)\n",
    "\n",
    "test_x = np.zeros((10000, 28*28))\n",
    "test_y = np.zeros((10000,))\n",
    "\n",
    "for i in range(10000):\n",
    "    test_x[i] = test['image'][i].flatten()\n",
    "    test_y[i] = -1 if test['label'][i] != 9 else 1\n",
    "    \n",
    "predict_y = lr.predict(test_x)\n",
    "np.sum((predict_y > 0) == (test_y > 0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Overall Success Rate__\n",
    "Stuff"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**PART II**\n",
    "For Part II, we will modify the current binary classifier to include  the regularization parameter shown in the instruction pdf. \n",
    "Then we will display the image corresponding to beta for different values of llambda. \n",
    "We will analyze the changes. We will then count the number of correctly identified hand-written digits using this modified classifier. We will see if there is any change in the accuracy as we vary llambda and compare the results to the results of Part I."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**PART III**\n",
    "We will compute the 10 largest eigenvalues and corresponding eigenvectors of the covariance matrix for the selected digit k of the \"train\" data set. We will display the eigenvectors as 28x28 images"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**PART IV**\n",
    "Part IV, we will extend the linear formulation of the Least quares in Part 1 to a non-linear Least Squares. More details in the instruction pdf."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
